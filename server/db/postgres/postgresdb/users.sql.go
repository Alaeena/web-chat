// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package postgresdb

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
insert into users (username, email, password)
values ($1, $2, $3)
returning id, username, email, password, access_token, refresh_token
`

type CreateUserParams struct {
	Username string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.AccessToken,
		&i.RefreshToken,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, username, email, password, access_token, refresh_token from users where email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.AccessToken,
		&i.RefreshToken,
	)
	return i, err
}

const getUserByTokenAndId = `-- name: GetUserByTokenAndId :one
select id, username, email, password, access_token, refresh_token from users where access_token = $1 and id = $2
`

type GetUserByTokenAndIdParams struct {
	AccessToken sql.NullString
	ID          int32
}

func (q *Queries) GetUserByTokenAndId(ctx context.Context, arg GetUserByTokenAndIdParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByTokenAndId, arg.AccessToken, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.AccessToken,
		&i.RefreshToken,
	)
	return i, err
}

const setAccessToken = `-- name: SetAccessToken :exec
update users set access_token = $1 where id = $2
`

type SetAccessTokenParams struct {
	AccessToken sql.NullString
	ID          int32
}

func (q *Queries) SetAccessToken(ctx context.Context, arg SetAccessTokenParams) error {
	_, err := q.db.ExecContext(ctx, setAccessToken, arg.AccessToken, arg.ID)
	return err
}
